1) 
  Slide:
  - lsql-csv je nástroj pro provádění krátkých dotazů nad daty
    malých CSV souborů z shellu
  - Implementuje nový jazyk LSQL podobný SQL, speciálně
    navržený pro práci se CSV soubory v shellu
  - Designovým cílem LSQL je být lapidárnějším jazykem než SQL
  - Účelem jeho návrhu je umožnit uživateli rychle psát
    jednoduché dotazy přímo do terminálu

  Motivace: 
  - Současné nástroje pro zpracování CSV z shellu mají zbyteně
    dlouhé, komplikované nebo nečitelné dotazy.

  - Cílem tohoto projektu je usnadnit uživateli Unix-like systému
    dotazování nad CSV soubory.

  Osnova prezentace:
  - Nejprve ukážu pár příkladu použití nástroje lsql-csv
    a pak projdeme alternativní řešení pro zpracování
    CSV souborů z shellu nad Unix-like systémem.
  - Na závěr projdeme, kde byl package publikován a
    jak ho nainstalovat.


2) (Nejprve) Co je to CSV soubor?
  Slide:  
  - CSV je jednoduchý souborový formát určený pro výměnu
    tabulkových dat

  Detail:
  - Soubor ve formátu CSV obsahuje řádky, ve kterých jsou jednotlivé položky odděleny znakem čárka (,). 
  - Hodnoty položek mohou být uzavřeny do uvozovek ("), což umožňuje, aby text položky obsahoval čárku.
  - Na slide vidíme příklad takového souboru.


3) Příklad: Hello World
  - Zde je příklad, kdy lsql-csv načte ze standardního vstupu ...
  - V prvním bloku je vstupní soubor hello-world.txt,
    v druhém bloku je lsql-csv příkaz a ve třetím bloku je 
    jeho výstup.
  - Jak můžeme vidět, příkaz se dělí na bloky separované čárkou,
    první blok je vždy from block určující vstupní soubory pro data.
    Druhý blok je v tomto případě select block.
  - &1.2, &1.1 referencují jednotlivé sloupce v rámci dotazu
    select bloku


4) Příklad: Jednoduché filtrování
  - Nyní pár praktických ukázek, k čemu může být tool dobrý.
    Řekněme, že chceme získat všechny uživatele s UID >= 1000.
    Zde je ukázka toho, jak lze toho dosáhnout za pomoci lsql-csv.
  - V prvním bloku je lsql-csv příkaz a ve druhém bloku jeho
    výstup.
  - Přepínač "-d:" v příkazu nastavuje delimiter.
  - Nově zde vidíme if blok, kterým se nastavuje filtrace.
    Gramatika if bloku přijímá takzvané arithmetic expression
    na rozdíl od select blocku, co přijímá select expression.
    Jedná se o ekvivalent WHERE bloku SQL.
  - Při výběru sloupců lze použít wildcardy a Bash curly
    expansion, což může být výhodné pro rychlý zápis dotazů.


5) Příklad: Jednoduchý join
  - V daném příkladu vidíme dotaz, který nám vypíše uživatele
    a název jeho defaultní skupiny.
  - Ve from bloku lze referovat více vstupních souborů zároveň.
    Tím dojde ke kartézkému součinu (cross join).
  - Inner joinu lze dosáhnout zapomocí if bloku.


6) Příklad: Jednoduché seskupení
  - Zde vidíme příklad použití aggregační funkce.
  - Uvedený příklad zobrazuje počet užvatelů používající daný shell.


7) Příklad: Jednoduché třídění
  - V tomto příkladu vidíme ukázku jednoduchého sortu.
  - Příklad zobrazuje uživatele s UID >= 1000 seřazené podle UID ve 
    třetím sloupci.
  - Je možné přidat do sort bloku i další sloupce, jsou použity ke zpřesnění
    pořadí konečného výstupu.


8) Příklad: Komplikovanější join
  - Zde je dotaz, který vypíše všechny skupiny a uživatele, co do ní
    náleží. (S vyjimkou uživatel, co do skupiny náleží skrze nastavení
    defaultní skupiny)
  - Agregační funkce cat pospojuje jednotlivé názvy uživetel oddělených
    čárkou.


9) Alternativní řešení (pro dotazování nad CSV soubory)
  - Nyní projdeme jednotlivá alternativní řešení pro dotazování
    nad CSV soubory
  - SQL - import CSV do standardní SQL databáze a provádění dotazů
    nad ní
  - Standardní linuxové nástroje - awk, join, sort,...
  - Jiné SQL implementace pro CSV (q, CSV SQL, trdsql, csvq)
  - Obecné programovací jazyky


10) Jak se lsql-csv liší od SQL? (1/2)
  Slide:
  - lsql-csv dotazy jsou v mnoha usecasech lapidárnější než
    SQL dotazy
  - Data a jazyk SQL jsou typed. lsql-csv a CSV soubory jsou
    typeless.
  - Import CSV souboru do SQL databáze může být vhodnější
    řešení, pokud jsou zapotřebí komplexnější queries, jsou
    zapotřebí joiny většího množství tables, nebo je zapotřebí
    provést velké množství queries.


11) Jak se lsql-csv liší od SQL? (2/2)
  - Zde vidíme porovnání LSQL a SQL.
  - Pro účely porovnání jsem zvolil jednoduchý dotaz, kde zobrazujeme druhý
    sloupec tabulky, pokud je jeho hodnota větší než 1000
  - V této domenostrované variantě je délka LSQL dotazu o 35% kratší než
    SQL dotaz


12) Rozdíly v použití lsql-csv od standardních linuxových nástrojů
  při zpracování CSV (1/2)
  Slide:
  - V některých případech dokáže být lsql-csv čitelnější a kratší

  Detail:
  - V mnoha případech je zapotřebí použití několika nástrojů zároveň
    nebo komplikovanějšího příkazu než jinak v případě lsql-csv je.


13) Rozdíly v použití lsql-csv od standardních linuxových nástrojů
  při zpracování CSV (2/2)
  - Zde vidíme použití joinu pro propojení dvou tabulek
    /etc/passwd a /etc/group.
  - Varianta s lsql-csv vyžaduje zavolání pouze jednoho příkazu a
    nevyžaduje pomocných souborů.


14) Kde je balíček nahraný?
  - Zdrojové kódy jsou na GitHubu.
  - Balíček je primárně distribuován skrze Hackage.
  - Balíček je taktéž součástí Stackage a NixOS distribuce.
  - Byl taktéž vytvořen request na zařazení balíčků do Gentoo skrze
    gentoo-overlay repozitář
  - Pro instalaci za pomoci Cabalu můžete použít níže uvedený příkaz,
    který nainstaluje nejnovější verzi package z Hackage.

15) Děkuji za pozornost.


----
Vyjádření k posudku oponenta:

1) Volbě jazyka je věnována jedna věta na konci Introduction, téma by si zasloužilo o trochu
delší rozvedení.
  - Volba jazyka jakožto "implementační detail" nebyla příliš rozvedena jako
    irelevantní k práci samotné.
  - Jazyk byl každopádně zvolen z důvodu výhodných vlastností parsovacích
    frameworků Haskellu (velmi snadný nativní monadický zápis parsovací logiky pro
    gramatiky typu LL(n)) a vlastností Haskellu (jako kupříkladu type safetiness a 
    lapidárnost logiky zápisu programu samotného).

2) Proč je syntaxe dotazů tak odlišná od SQL? Toto je zmíněno jen velmi krátce v Sekci 3.4
  - Tato otázka je taktéž rozvedena v sekci Introduction, úvodu sekce 1 a
    sekcích 3.2, 3.3 a 3.6
  - Stručně řečeno jde o to, že SQL byl navržen pro jiné účely než LSQL - 
    CSV soubory jsou typeless a pořadí jejich sloupců je dané a moc často se
    nemění, dotazy jsou spíše určené pro snadné psaní
    dotazů než pro jejich zpětenou interpretaci a protože můj osobní názor je,
    že některé z aspektů jazyka SQL mohli být navrženy lépe (jako například
    zbytečně dlouhé názvy keywords a optická separace jednotlivých částí
    dotazu, pokud programátor nepoužívá pro mne osobně těžkopádnou konvenci s
    upper casem pro buď keyword nebo "symboly")

3) Na několika místech je zmíněna složitost operace join jako O(nm), aniž by bylo uvedeno,
co m,n označuje a bylo jakkoli rozvedeno (např. Sekce 3.11)
  - Ano, tento přístup byl zvolen protože mi to z kontextu připadalo evidentní
    a tedy zbytečné dále rozepisovat.


